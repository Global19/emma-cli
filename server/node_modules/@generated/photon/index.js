'use strict'
var __awaiter =
  (this && this.__awaiter) ||
  function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function(resolve) {
            resolve(value)
          })
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value))
        } catch (e) {
          reject(e)
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value))
        } catch (e) {
          reject(e)
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected)
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next())
    })
  }
Object.defineProperty(exports, '__esModule', { value: true })
const runtime_1 = require('./runtime')
/**
 * Query Engine version: latest
 */
const path = require('path')
const debug = runtime_1.debugLib('photon')
class PhotonFetcher {
  constructor(photon, engine, debug = false, hooks) {
    this.photon = photon
    this.engine = engine
    this.debug = debug
    this.hooks = hooks
  }
  request(document, path = [], rootField, typeName, isList, callsite) {
    return __awaiter(this, void 0, void 0, function*() {
      const query = String(document)
      debug('Request:')
      debug(query)
      if (this.hooks && this.hooks.beforeRequest) {
        this.hooks.beforeRequest({ query, path, rootField, typeName, document })
      }
      try {
        yield this.photon.connect()
        const result = yield this.engine.request(query, typeName)
        debug('Response:')
        debug(result)
        return this.unpack(document, result, path, rootField, isList)
      } catch (e) {
        // HACK: This will be removed as soon as the query engine doesn't throw anymore
        if (
          e.message.includes('Record does not exist') &&
          rootField &&
          rootField.startsWith('findOne')
        ) {
          return null
        }
        if (callsite) {
          const { stack } = runtime_1.printStack({
            callsite,
            originalMethod: path.join('.'),
            onUs: e.isPanic,
          })
          throw new Error(stack + '\n\n' + e.message)
        } else {
          if (e.isPanic) {
            throw e
          } else {
            throw new Error(`Error in Photon${path}: \n` + e.stack)
          }
        }
      }
    })
  }
  unpack(document, data, path, rootField, isList) {
    const getPath = []
    if (rootField) {
      getPath.push(rootField)
    }
    getPath.push(...path.filter(p => p !== 'select' && p !== 'include'))
    return runtime_1.unpack({ document, path: getPath, data })
  }
}
/**
 * Build tool annotations
 * In order to make `ncc` and `node-file-trace` happy.
 **/
path.join(__dirname, 'runtime/query-engine-darwin')
class Photon {
  constructor(options = {}) {
    const useDebug =
      options.debug === true
        ? true
        : typeof options.debug === 'object'
        ? Boolean(options.debug.library)
        : false
    if (useDebug) {
      runtime_1.debugLib.enable('photon')
    }
    const debugEngine =
      options.debug === true
        ? true
        : typeof options.debug === 'object'
        ? Boolean(options.debug.engine)
        : false
    // datamodel = datamodel without datasources + printed datasources
    this.datamodel =
      'datasource pg {\n  provider = "postgres"\n  url      = env("DATABASE_URL")\n}\n\ngenerator photon {\n  provider = "photonjs"\n  output   = "./node_modules/@generated/photon"\n}\n\nmodel Starter {\n  // System\n  id           String   @id @default(cuid())\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n  // Meta\n  repo         String\n  owner        String\n  // Info\n  path         String\n  ref          String\n  // Search\n  name         String\n  description  String?\n  dependencies String[]\n}'
    const predefinedDatasources = []
    const inputDatasources = Object.entries(options.datasources || {}).map(
      ([name, url]) => ({ name, url: url }),
    )
    const datasources = runtime_1.mergeBy(
      predefinedDatasources,
      inputDatasources,
      source => source.name,
    )
    const internal = options.__internal || {}
    const engineConfig = internal.engine || {}
    this.engine = new runtime_1.Engine({
      cwd: engineConfig.cwd || path.resolve(__dirname, '../../..'),
      debug: debugEngine,
      datamodel: this.datamodel,
      prismaPath: engineConfig.binaryPath || undefined,
      datasources,
      generator: {
        name: 'photon',
        provider: 'photonjs',
        output:
          '/Users/maticzavadlal/Code/mine/emma-cli/server/node_modules/@generated/photon',
        binaryTargets: [],
        config: {},
      },
    })
    this.dmmf = new runtime_1.DMMFClass(exports.dmmf)
    this.fetcher = new PhotonFetcher(this, this.engine, false, internal.hooks)
  }
  connectEngine(publicCall) {
    return __awaiter(this, void 0, void 0, function*() {
      return this.engine.start()
    })
  }
  connect() {
    if (this.connectionPromise) {
      return this.connectionPromise
    }
    this.connectionPromise = this.connectEngine(true)
    return this.connectionPromise
  }
  disconnect() {
    return __awaiter(this, void 0, void 0, function*() {
      yield this.engine.stop()
    })
  }
  // won't be generated for now
  // private _query?: QueryDelegate
  // get query(): QueryDelegate {
  //   return this._query ? this._query: (this._query = QueryDelegate(this.dmmf, this.fetcher))
  // }
  get starters() {
    return StarterDelegate(this.dmmf, this.fetcher)
  }
}
exports.Photon = Photon
/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) {
  return x
}
exports.OrderByArg = makeEnum({
  asc: 'asc',
  desc: 'desc',
})
function StarterDelegate(dmmf, fetcher) {
  const Starter = args =>
    new StarterClient(
      dmmf,
      fetcher,
      'query',
      'findManyStarter',
      'starters',
      args,
      [],
    )
  Starter.findOne = args =>
    args.select
      ? new StarterClient(
          dmmf,
          fetcher,
          'query',
          'findOneStarter',
          'starters.findOne',
          args,
          [],
        )
      : new StarterClient(
          dmmf,
          fetcher,
          'query',
          'findOneStarter',
          'starters.findOne',
          args,
          [],
        )
  Starter.findMany = args =>
    new StarterClient(
      dmmf,
      fetcher,
      'query',
      'findManyStarter',
      'starters.findMany',
      args,
      [],
    )
  Starter.create = args =>
    args.select
      ? new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'createOneStarter',
          'starters.create',
          args,
          [],
        )
      : new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'createOneStarter',
          'starters.create',
          args,
          [],
        )
  Starter.delete = args =>
    args.select
      ? new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'deleteOneStarter',
          'starters.delete',
          args,
          [],
        )
      : new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'deleteOneStarter',
          'starters.delete',
          args,
          [],
        )
  Starter.update = args =>
    args.select
      ? new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'updateOneStarter',
          'starters.update',
          args,
          [],
        )
      : new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'updateOneStarter',
          'starters.update',
          args,
          [],
        )
  Starter.deleteMany = args =>
    new StarterClient(
      dmmf,
      fetcher,
      'mutation',
      'deleteManyStarter',
      'starters.deleteMany',
      args,
      [],
    )
  Starter.updateMany = args =>
    new StarterClient(
      dmmf,
      fetcher,
      'mutation',
      'updateManyStarter',
      'starters.updateMany',
      args,
      [],
    )
  Starter.upsert = args =>
    args.select
      ? new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'upsertOneStarter',
          'starters.upsert',
          args,
          [],
        )
      : new StarterClient(
          dmmf,
          fetcher,
          'mutation',
          'upsertOneStarter',
          'starters.upsert',
          args,
          [],
        )
  Starter.count = () =>
    new StarterClient(
      dmmf,
      fetcher,
      'query',
      'aggregateStarter',
      'starters.count',
      {},
      ['count'],
    )
  return Starter // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class StarterClient {
  constructor(
    _dmmf,
    _fetcher,
    _queryType,
    _rootField,
    _clientMethod,
    _args,
    _path,
    _isList = false,
  ) {
    this._dmmf = _dmmf
    this._fetcher = _fetcher
    this._queryType = _queryType
    this._rootField = _rootField
    this._clientMethod = _clientMethod
    this._args = _args
    this._path = _path
    this._isList = _isList
    // @ts-ignore
    if (
      typeof window === 'undefined' &&
      process.env.NODE_ENV !== 'production'
    ) {
      const error = new Error()
      if (error && error.stack) {
        const stack = error.stack
        this._callsite = stack
      }
    }
  }
  get _document() {
    const { _rootField: rootField } = this
    const document = runtime_1.makeDocument({
      dmmf: this._dmmf,
      rootField,
      rootTypeName: this._queryType,
      select: this._args,
    })
    try {
      document.validate(this._args, false, this._clientMethod)
    } catch (e) {
      const x = e
      if (x.render) {
        if (this._callsite) {
          e.message = x.render(this._callsite)
        }
      }
      throw e
    }
    return runtime_1.transformDocument(document)
  }
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then(onfulfilled, onrejected) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request(
        this._document,
        this._path,
        this._rootField,
        'Starter',
        this._isList,
        this._callsite,
      )
    }
    return this._requestPromise.then(onfulfilled, onrejected)
  }
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch(onrejected) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request(
        this._document,
        this._path,
        this._rootField,
        'Starter',
        this._isList,
        this._callsite,
      )
    }
    return this._requestPromise.catch(onrejected)
  }
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request(
        this._document,
        this._path,
        this._rootField,
        'Starter',
        this._isList,
        this._callsite,
      )
    }
    return this._requestPromise.finally(onfinally)
  }
}
exports.StarterClient = StarterClient
/**
 * DMMF
 */
exports.dmmf = {
  datamodel: {
    enums: [],
    models: [
      {
        name: 'Starter',
        isEmbedded: false,
        dbName: null,
        fields: [
          {
            name: 'id',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: true,
            type: 'String',
            default: { name: 'cuid', returnType: 'String', args: [] },
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'createdAt',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: false,
            type: 'DateTime',
            default: { name: 'now', returnType: 'DateTime', args: [] },
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'updatedAt',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: false,
            type: 'DateTime',
            isGenerated: false,
            isUpdatedAt: true,
          },
          {
            name: 'repo',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: false,
            type: 'String',
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'owner',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: false,
            type: 'String',
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'path',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: false,
            type: 'String',
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'ref',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: false,
            type: 'String',
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'name',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: true,
            isUnique: false,
            isId: false,
            type: 'String',
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'description',
            kind: 'scalar',
            dbName: null,
            isList: false,
            isRequired: false,
            isUnique: false,
            isId: false,
            type: 'String',
            isGenerated: false,
            isUpdatedAt: false,
          },
          {
            name: 'dependencies',
            kind: 'scalar',
            dbName: null,
            isList: true,
            isRequired: false,
            isUnique: false,
            isId: false,
            type: 'String',
            isGenerated: false,
            isUpdatedAt: false,
          },
        ],
        isGenerated: false,
        idFields: [],
      },
    ],
  },
  mappings: [
    {
      model: 'Starter',
      plural: 'starters',
      findOne: 'findOneStarter',
      findMany: 'findManyStarter',
      create: 'createOneStarter',
      delete: 'deleteOneStarter',
      update: 'updateOneStarter',
      deleteMany: 'deleteManyStarter',
      updateMany: 'updateManyStarter',
      upsert: 'upsertOneStarter',
      aggregate: 'aggregateStarter',
    },
  ],
  schema: {
    enums: [{ name: 'OrderByArg', values: ['asc', 'desc'] }],
    outputTypes: [
      {
        name: 'Starter',
        fields: [
          {
            name: 'id',
            args: [],
            outputType: {
              type: 'ID',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'createdAt',
            args: [],
            outputType: {
              type: 'DateTime',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'updatedAt',
            args: [],
            outputType: {
              type: 'DateTime',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'repo',
            args: [],
            outputType: {
              type: 'String',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'owner',
            args: [],
            outputType: {
              type: 'String',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'path',
            args: [],
            outputType: {
              type: 'String',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'ref',
            args: [],
            outputType: {
              type: 'String',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'name',
            args: [],
            outputType: {
              type: 'String',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'description',
            args: [],
            outputType: {
              type: 'String',
              kind: 'scalar',
              isRequired: false,
              isList: false,
            },
          },
          {
            name: 'dependencies',
            args: [],
            outputType: {
              type: 'String',
              kind: 'scalar',
              isRequired: true,
              isList: true,
            },
          },
        ],
      },
      {
        name: 'AggregateStarter',
        fields: [
          {
            name: 'count',
            args: [],
            outputType: {
              type: 'Int',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
        ],
      },
      {
        name: 'Query',
        fields: [
          {
            name: 'findManyStarter',
            args: [
              {
                name: 'where',
                inputType: [
                  {
                    type: 'StarterWhereInput',
                    kind: 'object',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
              {
                name: 'orderBy',
                inputType: [
                  {
                    isList: false,
                    isRequired: false,
                    type: 'StarterOrderByInput',
                    kind: 'object',
                  },
                ],
              },
              {
                name: 'skip',
                inputType: [
                  {
                    type: 'Int',
                    kind: 'scalar',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
              {
                name: 'after',
                inputType: [
                  {
                    type: 'ID',
                    kind: 'scalar',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
              {
                name: 'before',
                inputType: [
                  {
                    type: 'ID',
                    kind: 'scalar',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
              {
                name: 'first',
                inputType: [
                  {
                    type: 'Int',
                    kind: 'scalar',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
              {
                name: 'last',
                inputType: [
                  {
                    type: 'Int',
                    kind: 'scalar',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'Starter',
              kind: 'object',
              isRequired: false,
              isList: true,
            },
          },
          {
            name: 'aggregateStarter',
            args: [],
            outputType: {
              type: 'AggregateStarter',
              kind: 'object',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'findOneStarter',
            args: [
              {
                name: 'where',
                inputType: [
                  {
                    type: 'StarterWhereUniqueInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'Starter',
              kind: 'object',
              isRequired: false,
              isList: false,
            },
          },
        ],
      },
      {
        name: 'BatchPayload',
        fields: [
          {
            name: 'count',
            args: [],
            outputType: {
              type: 'Int',
              kind: 'scalar',
              isRequired: true,
              isList: false,
            },
          },
        ],
      },
      {
        name: 'Mutation',
        fields: [
          {
            name: 'createOneStarter',
            args: [
              {
                name: 'data',
                inputType: [
                  {
                    type: 'StarterCreateInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'Starter',
              kind: 'object',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'deleteOneStarter',
            args: [
              {
                name: 'where',
                inputType: [
                  {
                    type: 'StarterWhereUniqueInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'Starter',
              kind: 'object',
              isRequired: false,
              isList: false,
            },
          },
          {
            name: 'updateOneStarter',
            args: [
              {
                name: 'data',
                inputType: [
                  {
                    type: 'StarterUpdateInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
              {
                name: 'where',
                inputType: [
                  {
                    type: 'StarterWhereUniqueInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'Starter',
              kind: 'object',
              isRequired: false,
              isList: false,
            },
          },
          {
            name: 'upsertOneStarter',
            args: [
              {
                name: 'where',
                inputType: [
                  {
                    type: 'StarterWhereUniqueInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
              {
                name: 'create',
                inputType: [
                  {
                    type: 'StarterCreateInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
              {
                name: 'update',
                inputType: [
                  {
                    type: 'StarterUpdateInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'Starter',
              kind: 'object',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'updateManyStarter',
            args: [
              {
                name: 'data',
                inputType: [
                  {
                    type: 'StarterUpdateManyMutationInput',
                    kind: 'object',
                    isRequired: true,
                    isList: false,
                  },
                ],
              },
              {
                name: 'where',
                inputType: [
                  {
                    type: 'StarterWhereInput',
                    kind: 'object',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'BatchPayload',
              kind: 'object',
              isRequired: true,
              isList: false,
            },
          },
          {
            name: 'deleteManyStarter',
            args: [
              {
                name: 'where',
                inputType: [
                  {
                    type: 'StarterWhereInput',
                    kind: 'object',
                    isRequired: false,
                    isList: false,
                  },
                ],
              },
            ],
            outputType: {
              type: 'BatchPayload',
              kind: 'object',
              isRequired: true,
              isList: false,
            },
          },
        ],
      },
    ],
    inputTypes: [
      {
        name: 'StarterWhereInput',
        fields: [
          {
            name: 'id',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                type: 'StringFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'createdAt',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
              {
                type: 'DateTimeFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'updatedAt',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
              {
                type: 'DateTimeFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'repo',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                type: 'StringFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'owner',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                type: 'StringFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'path',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                type: 'StringFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'ref',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                type: 'StringFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'name',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                type: 'StringFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'description',
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                type: 'NullableStringFilter',
                isList: false,
                isRequired: false,
                kind: 'object',
              },
              {
                type: 'null',
                isList: false,
                isRequired: false,
                kind: 'scalar',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'AND',
            inputType: [
              {
                type: 'StarterWhereInput',
                kind: 'object',
                isRequired: false,
                isList: true,
              },
            ],
            isRelationFilter: true,
          },
          {
            name: 'OR',
            inputType: [
              {
                type: 'StarterWhereInput',
                kind: 'object',
                isRequired: false,
                isList: true,
              },
            ],
            isRelationFilter: true,
          },
          {
            name: 'NOT',
            inputType: [
              {
                type: 'StarterWhereInput',
                kind: 'object',
                isRequired: false,
                isList: true,
              },
            ],
            isRelationFilter: true,
          },
        ],
        isWhereType: true,
        atLeastOne: false,
      },
      {
        name: 'StarterWhereUniqueInput',
        fields: [
          {
            name: 'id',
            inputType: [
              { type: 'ID', kind: 'scalar', isRequired: false, isList: false },
            ],
          },
        ],
        atLeastOne: true,
      },
      {
        name: 'StarterCreatedependenciesInput',
        fields: [
          {
            name: 'set',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: true,
              },
            ],
          },
        ],
      },
      {
        name: 'StarterCreateInput',
        fields: [
          {
            name: 'id',
            inputType: [
              { type: 'ID', kind: 'scalar', isRequired: false, isList: false },
            ],
          },
          {
            name: 'createdAt',
            inputType: [
              {
                type: 'DateTime',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'updatedAt',
            inputType: [
              {
                type: 'DateTime',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'repo',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: true,
                isList: false,
              },
            ],
          },
          {
            name: 'owner',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: true,
                isList: false,
              },
            ],
          },
          {
            name: 'path',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: true,
                isList: false,
              },
            ],
          },
          {
            name: 'ref',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: true,
                isList: false,
              },
            ],
          },
          {
            name: 'name',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: true,
                isList: false,
              },
            ],
          },
          {
            name: 'description',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'dependencies',
            inputType: [
              {
                type: 'StarterCreatedependenciesInput',
                kind: 'object',
                isRequired: false,
                isList: false,
              },
            ],
          },
        ],
      },
      {
        name: 'StarterUpdatedependenciesInput',
        fields: [
          {
            name: 'set',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: true,
              },
            ],
          },
        ],
      },
      {
        name: 'StarterUpdateInput',
        fields: [
          {
            name: 'id',
            inputType: [
              { type: 'ID', kind: 'scalar', isRequired: false, isList: false },
            ],
          },
          {
            name: 'createdAt',
            inputType: [
              {
                type: 'DateTime',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'updatedAt',
            inputType: [
              {
                type: 'DateTime',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'repo',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'owner',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'path',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'ref',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'name',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'description',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'dependencies',
            inputType: [
              {
                type: 'StarterUpdatedependenciesInput',
                kind: 'object',
                isRequired: false,
                isList: false,
              },
            ],
          },
        ],
      },
      {
        name: 'StarterUpdateManyMutationInput',
        fields: [
          {
            name: 'id',
            inputType: [
              { type: 'ID', kind: 'scalar', isRequired: false, isList: false },
            ],
          },
          {
            name: 'createdAt',
            inputType: [
              {
                type: 'DateTime',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'updatedAt',
            inputType: [
              {
                type: 'DateTime',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'repo',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'owner',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'path',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'ref',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'name',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'description',
            inputType: [
              {
                type: 'String',
                kind: 'scalar',
                isRequired: false,
                isList: false,
              },
            ],
          },
          {
            name: 'dependencies',
            inputType: [
              {
                type: 'StarterUpdatedependenciesInput',
                kind: 'object',
                isRequired: false,
                isList: false,
              },
            ],
          },
        ],
      },
      {
        name: 'StringFilter',
        fields: [
          {
            name: 'equals',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'not',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'StringFilter',
              },
            ],
          },
          {
            name: 'in',
            isRelationFilter: false,
            inputType: [
              {
                isList: true,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'notIn',
            isRelationFilter: false,
            inputType: [
              {
                isList: true,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'lt',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'lte',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'gt',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'gte',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'contains',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'startsWith',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'endsWith',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
        ],
        atLeastOne: false,
      },
      {
        name: 'DateTimeFilter',
        fields: [
          {
            name: 'equals',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
            ],
          },
          {
            name: 'not',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTimeFilter',
              },
            ],
          },
          {
            name: 'in',
            isRelationFilter: false,
            inputType: [
              {
                isList: true,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
            ],
          },
          {
            name: 'notIn',
            isRelationFilter: false,
            inputType: [
              {
                isList: true,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
            ],
          },
          {
            name: 'lt',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
            ],
          },
          {
            name: 'lte',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
            ],
          },
          {
            name: 'gt',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
            ],
          },
          {
            name: 'gte',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'DateTime',
              },
            ],
          },
        ],
        atLeastOne: false,
      },
      {
        name: 'NullableStringFilter',
        fields: [
          {
            name: 'equals',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'null',
              },
            ],
          },
          {
            name: 'not',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'null',
              },
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'NullableStringFilter',
              },
            ],
          },
          {
            name: 'in',
            isRelationFilter: false,
            inputType: [
              {
                isList: true,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'notIn',
            isRelationFilter: false,
            inputType: [
              {
                isList: true,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'lt',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'lte',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'gt',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'gte',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'contains',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'startsWith',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
          {
            name: 'endsWith',
            isRelationFilter: false,
            inputType: [
              {
                isList: false,
                isRequired: false,
                kind: 'scalar',
                type: 'String',
              },
            ],
          },
        ],
        atLeastOne: false,
      },
      {
        name: 'StarterOrderByInput',
        atLeastOne: true,
        atMostOne: true,
        isOrderType: true,
        fields: [
          {
            name: 'id',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'createdAt',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'updatedAt',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'repo',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'owner',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'path',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'ref',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'name',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
          {
            name: 'description',
            inputType: [
              {
                type: 'OrderByArg',
                isList: false,
                isRequired: false,
                kind: 'enum',
              },
            ],
            isRelationFilter: false,
          },
        ],
      },
    ],
  },
}
